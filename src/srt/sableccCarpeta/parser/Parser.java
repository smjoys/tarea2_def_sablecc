/* This file was generated by SableCC (http://www.sablecc.org/). */

package srt.sableccCarpeta.parser;

import srt.sableccCarpeta.lexer.*;
import srt.sableccCarpeta.node.*;
import srt.sableccCarpeta.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PListasubtitulo node1 = (PListasubtitulo) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ASubtituloListasubtitulo */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AListsubtituloListasubtitulo */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ASubtitulo */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ATiempo */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AHora1 */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AHora2 */
            {
                ArrayList<Object> list = new5();
                push(goTo(4), list, false);
            }
            break;
            case 6: /* reduce AHora */
            {
                ArrayList<Object> list = new6();
                push(goTo(5), list, false);
            }
            break;
            case 7: /* reduce AMinutos */
            {
                ArrayList<Object> list = new7();
                push(goTo(6), list, false);
            }
            break;
            case 8: /* reduce ASegundos */
            {
                ArrayList<Object> list = new8();
                push(goTo(7), list, false);
            }
            break;
            case 9: /* reduce AMiliseg */
            {
                ArrayList<Object> list = new9();
                push(goTo(8), list, false);
            }
            break;
            case 10: /* reduce ASubTextlist */
            {
                ArrayList<Object> list = new10();
                push(goTo(9), list, false);
            }
            break;
            case 11: /* reduce ATextlistTextlist */
            {
                ArrayList<Object> list = new11();
                push(goTo(9), list, false);
            }
            break;
            case 12: /* reduce ASub1Sub */
            {
                ArrayList<Object> list = new12();
                push(goTo(10), list, false);
            }
            break;
            case 13: /* reduce ASub2Sub */
            {
                ArrayList<Object> list = new13();
                push(goTo(10), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ASubtituloListasubtitulo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListasubtitulo plistasubtituloNode1;
        {
            // Block
        PSubtitulo psubtituloNode2;
        psubtituloNode2 = (PSubtitulo)nodeArrayList1.get(0);

        plistasubtituloNode1 = new ASubtituloListasubtitulo(psubtituloNode2);
        }
	nodeList.add(plistasubtituloNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AListsubtituloListasubtitulo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListasubtitulo plistasubtituloNode1;
        {
            // Block
        PSubtitulo psubtituloNode2;
        PListasubtitulo plistasubtituloNode3;
        psubtituloNode2 = (PSubtitulo)nodeArrayList1.get(0);
        plistasubtituloNode3 = (PListasubtitulo)nodeArrayList2.get(0);

        plistasubtituloNode1 = new AListsubtituloListasubtitulo(psubtituloNode2, plistasubtituloNode3);
        }
	nodeList.add(plistasubtituloNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ASubtitulo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSubtitulo psubtituloNode1;
        {
            // Block
        TDigito tdigitoNode2;
        PTiempo ptiempoNode3;
        PTextlist ptextlistNode4;
        tdigitoNode2 = (TDigito)nodeArrayList1.get(0);
        ptiempoNode3 = (PTiempo)nodeArrayList2.get(0);
        ptextlistNode4 = (PTextlist)nodeArrayList3.get(0);

        psubtituloNode1 = new ASubtitulo(tdigitoNode2, ptiempoNode3, ptextlistNode4);
        }
	nodeList.add(psubtituloNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ATiempo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTiempo ptiempoNode1;
        {
            // Block
        PHora1 phora1Node2;
        TFlecha tflechaNode3;
        PHora2 phora2Node4;
        phora1Node2 = (PHora1)nodeArrayList1.get(0);
        tflechaNode3 = (TFlecha)nodeArrayList2.get(0);
        phora2Node4 = (PHora2)nodeArrayList3.get(0);

        ptiempoNode1 = new ATiempo(phora1Node2, tflechaNode3, phora2Node4);
        }
	nodeList.add(ptiempoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AHora1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHora1 phora1Node1;
        {
            // Block
        PHora phoraNode2;
        TDosp tdospNode3;
        PMinutos pminutosNode4;
        TDosp tdospNode5;
        PSegundos psegundosNode6;
        TComa tcomaNode7;
        PMiliseg pmilisegNode8;
        phoraNode2 = (PHora)nodeArrayList1.get(0);
        tdospNode3 = (TDosp)nodeArrayList2.get(0);
        pminutosNode4 = (PMinutos)nodeArrayList3.get(0);
        tdospNode5 = (TDosp)nodeArrayList4.get(0);
        psegundosNode6 = (PSegundos)nodeArrayList5.get(0);
        tcomaNode7 = (TComa)nodeArrayList6.get(0);
        pmilisegNode8 = (PMiliseg)nodeArrayList7.get(0);

        phora1Node1 = new AHora1(phoraNode2, tdospNode3, pminutosNode4, tdospNode5, psegundosNode6, tcomaNode7, pmilisegNode8);
        }
	nodeList.add(phora1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AHora2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHora2 phora2Node1;
        {
            // Block
        PHora phoraNode2;
        TDosp tdospNode3;
        PMinutos pminutosNode4;
        TDosp tdospNode5;
        PSegundos psegundosNode6;
        TComa tcomaNode7;
        PMiliseg pmilisegNode8;
        phoraNode2 = (PHora)nodeArrayList1.get(0);
        tdospNode3 = (TDosp)nodeArrayList2.get(0);
        pminutosNode4 = (PMinutos)nodeArrayList3.get(0);
        tdospNode5 = (TDosp)nodeArrayList4.get(0);
        psegundosNode6 = (PSegundos)nodeArrayList5.get(0);
        tcomaNode7 = (TComa)nodeArrayList6.get(0);
        pmilisegNode8 = (PMiliseg)nodeArrayList7.get(0);

        phora2Node1 = new AHora2(phoraNode2, tdospNode3, pminutosNode4, tdospNode5, psegundosNode6, tcomaNode7, pmilisegNode8);
        }
	nodeList.add(phora2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AHora */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHora phoraNode1;
        {
            // Block
        TDigito tdigitoNode2;
        tdigitoNode2 = (TDigito)nodeArrayList1.get(0);

        phoraNode1 = new AHora(tdigitoNode2);
        }
	nodeList.add(phoraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AMinutos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMinutos pminutosNode1;
        {
            // Block
        TDigito tdigitoNode2;
        tdigitoNode2 = (TDigito)nodeArrayList1.get(0);

        pminutosNode1 = new AMinutos(tdigitoNode2);
        }
	nodeList.add(pminutosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ASegundos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSegundos psegundosNode1;
        {
            // Block
        TDigito tdigitoNode2;
        tdigitoNode2 = (TDigito)nodeArrayList1.get(0);

        psegundosNode1 = new ASegundos(tdigitoNode2);
        }
	nodeList.add(psegundosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AMiliseg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMiliseg pmilisegNode1;
        {
            // Block
        TDigito tdigitoNode2;
        tdigitoNode2 = (TDigito)nodeArrayList1.get(0);

        pmilisegNode1 = new AMiliseg(tdigitoNode2);
        }
	nodeList.add(pmilisegNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ASubTextlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTextlist ptextlistNode1;
        {
            // Block
        PSub psubNode2;
        psubNode2 = (PSub)nodeArrayList1.get(0);

        ptextlistNode1 = new ASubTextlist(psubNode2);
        }
	nodeList.add(ptextlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ATextlistTextlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTextlist ptextlistNode1;
        {
            // Block
        PSub psubNode2;
        PTextlist ptextlistNode3;
        psubNode2 = (PSub)nodeArrayList1.get(0);
        ptextlistNode3 = (PTextlist)nodeArrayList2.get(0);

        ptextlistNode1 = new ATextlistTextlist(psubNode2, ptextlistNode3);
        }
	nodeList.add(ptextlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASub1Sub */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSub psubNode1;
        {
            // Block
        TEtiqueta tetiquetaNode2;
        TTexto ttextoNode3;
        TEtiqueta tetiquetaNode4;
        tetiquetaNode2 = (TEtiqueta)nodeArrayList1.get(0);
        ttextoNode3 = (TTexto)nodeArrayList2.get(0);
        tetiquetaNode4 = (TEtiqueta)nodeArrayList3.get(0);

        psubNode1 = new ASub1Sub(tetiquetaNode2, ttextoNode3, tetiquetaNode4);
        }
	nodeList.add(psubNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASub2Sub */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSub psubNode1;
        {
            // Block
        TTexto ttextoNode2;
        ttextoNode2 = (TTexto)nodeArrayList1.get(0);

        psubNode1 = new ASub2Sub(ttextoNode2);
        }
	nodeList.add(psubNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {0, SHIFT, 4}, },
			{{-1, ERROR, 2}, {6, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 5}, {1, SHIFT, 9}, {5, SHIFT, 10}, },
			{{-1, ERROR, 6}, {4, SHIFT, 13}, },
			{{-1, ERROR, 7}, {3, SHIFT, 14}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 10}, {1, SHIFT, 15}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 10}, {1, SHIFT, 9}, {5, SHIFT, 10}, },
			{{-1, ERROR, 13}, {0, SHIFT, 4}, },
			{{-1, ERROR, 14}, {0, SHIFT, 19}, },
			{{-1, ERROR, 15}, {5, SHIFT, 21}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 18}, {3, SHIFT, 22}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 20}, {3, SHIFT, 23}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 22}, {0, SHIFT, 19}, },
			{{-1, ERROR, 23}, {0, SHIFT, 25}, },
			{{-1, ERROR, 24}, {3, SHIFT, 27}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 26}, {2, SHIFT, 28}, },
			{{-1, ERROR, 27}, {0, SHIFT, 25}, },
			{{-1, ERROR, 28}, {0, SHIFT, 30}, },
			{{-1, ERROR, 29}, {2, SHIFT, 32}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 32}, {0, SHIFT, 30}, },
			{{-1, REDUCE, 5}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, {3, 8}, },
			{{-1, 3}, },
			{{-1, 5}, },
			{{-1, 6}, },
			{{-1, 17}, },
			{{-1, 7}, {13, 18}, },
			{{-1, 20}, {22, 24}, },
			{{-1, 26}, {27, 29}, },
			{{-1, 31}, {32, 33}, },
			{{-1, 11}, {12, 16}, },
			{{-1, 12}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: digito",
			"expecting: EOF",
			"expecting: digito, EOF",
			"expecting: ':'",
			"expecting: texto, etiqueta",
			"expecting: '-->'",
			"expecting: digito, texto, etiqueta, EOF",
			"expecting: texto",
			"expecting: etiqueta",
			"expecting: ','",
			"expecting: texto, '-->', etiqueta",
        };*/
    private static int[] errors;
/*      {
			0, 0, 1, 2, 3, 4, 5, 3, 1, 6, 7, 2, 6, 0, 0, 8, 2, 4, 3, 3, 3, 6, 0, 0, 3, 9, 9, 0, 0, 9, 10, 5, 0, 4, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
